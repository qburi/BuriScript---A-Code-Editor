import jedi.api.errorsfrom PyQt5.QtCore import *from PyQt5.Qsci import *from jedi import Scriptfrom jedi.api import Completionimport multiprocessingimport threadingimport sysimport pep8class AutoCompletion(QThread):    def __init__(self, file_path, api, parent_editor):        super(AutoCompletion, self).__init__()        self.file_path = file_path        self.completions: list[Completion] = None        self.script: Script = None        self.__parent_editor: QsciScintilla = parent_editor        self.api: QsciAPIs = api        self.line = 0        self.index = 0        self.text = ""        self.syntax_errors: list[jedi.api.errors.SyntaxError] = []    def run(self):        try:            self.script = Script(self.text)            self.completions = self.script.complete(self.line, self.index)            # self.syntax_errors: list[jedi.api.errors.SyntaxError] = self.script.get_syntax_errors()            # self.underline_syntax_errors(self.syntax_errors)            self.load_autocomplete(self.completions)        except Exception as error:            print(error)            pass        self.finished.emit()    def load_autocomplete(self, completions):        self.api.clear()        # print(*[x for x in completions])        [self.api.add(x.name) for x in completions]        self.api.prepare()    def get_completions(self, line: int, index: int, text: str):        self.line = line        self.index = index        self.text = text        self.start()    def underline_syntax_errors(self, errors_to_underline: list[jedi.api.errors.SyntaxError]):        def run_process_highlight_error():            self.__parent_editor.clearIndicatorRange(0, 0, QsciScintilla.SCI_GETLINECOUNT, QsciScintilla.SCI_GETLINECOUNT,                                                     2)            for syntax_error in errors_to_underline:                line_number_start, line_number_end, column_start, column_end = syntax_error.line, syntax_error.until_line, \                    syntax_error.column, \                    syntax_error.until_column                self.__parent_editor.fillIndicatorRange(line_number_start - 1, column_start, line_number_end, column_end, 2)            sys.exit()        syntax_highlighting_thread = threading.Thread(target=run_process_highlight_error, args=[])        syntax_highlighting_thread.start()"""class CustomMainWindow(QMainWindow):    def __init__(self):        super(CustomMainWindow, self).__init__()        screen = QDesktopWidget().screenGeometry()        self.setGeometry(0, 0, screen.width(), screen.height())        self.showMaximized()        self.__editor = QsciScintilla()        self.__frm = QFrame()        self.__lyt = QVBoxLayout()        self.setCentralWidget(self.__frm)        self.__editor.setStyleSheet("background-color: white")        self.__editor.setFont(QFont("JetBrains Mono"))        self.setStyleSheet("background-color: white")        self.setFont(QFont("JetBrains Mono"))        self.__frm.setLayout(self.__lyt)        self.__lyt.addWidget(self.__editor)        self.__lexer = QsciLexerPython(self.__editor)        self.__api = QsciAPIs(self.__lexer)        self.__editor.autoCompletionSource()        self.__editor.setAutoCompletionSource(QsciScintilla.AcsAll)        self.__editor.setAutoCompletionThreshold(1)        self.__editor.setAutoCompletionCaseSensitivity(True)        self.__editor.setAutoCompletionReplaceWord(True)        self.__auto_complete = AutoCompletion("This_is_a_file.py", self.__api)        self.__auto_complete.finished.connect(self.load_autocomplete)        self.__editor.cursorPositionChanged.connect(self._cursor_position_changed)        self.__editor.setLexer(self.__lexer)        self.show()    def _cursor_position_changed(self, line: int, index: int) -> None:        self.__auto_complete.get_completions(line+1, index, self.__editor.text())    def load_autocomplete(self):        passif __name__ == "__main__":    app = QApplication(sys.argv)    window = CustomMainWindow()    sys.exit(app.exec_())"""